---
# tasks file for armulator
- set_fact:
    partflags: []
    lvm: ""

# Download virtualisation packages
- name: Install the image handling packages
  package:
    name: 
      - xz
      - kpartx
    state: latest
  when: url == "false"
  #loop:
  #loop_control:
  #  loop_var: pkg
    
# Download base image from https://www.happyassassin.net/nightlies.html
# https://kojipkgs.fedoraproject.org/compose/branched/Fedora-32-20200314.n.1/compose/Server/armhfp/images/Fedora-Server-armhfp-32-20200314.n.1-sda.raw.xz
# https://kojipkgs.fedoraproject.org/compose/branched/Fedora-32-20200314.n.1/compose/Server/aarch64/images/Fedora-Server-32-20200314.n.1.aarch64.raw.xz
#
- name: "Checking for redirect and setting redcheck.stdout_lines.0 to notredirect or the actual url"
  shell: 'curl {{ url }} --max-time 5 --max-redirs 0 --silent > /dev/null && curl {{ url }} --max-redirs 0 --silent |grep moved|cut -d\" -f2 || echo notredirect'
  args:
    warn: no
  register: redcheck

- debug: var=redcheck.stdout_lines.0

- name: Use the redirect URL to avoid redownloading large images
  set_fact: 
    url: "{{ redcheck.stdout_lines.0 }}"
  when: redcheck.stdout_lines.0 != "notredirect"

- name: "Download the image from {{ url }}"
  get_url:
    url: "{{ url }}"
    dest: "{{ workpath }}/{{ url | basename }}"
  register: download
- debug: var=download

- set_fact:
    extractedfile: "{{ download.dest | regex_replace('.xz') | regex_replace('.zip', '.img') }}"
- debug: var=extractedfile
- name: "Check that {{ extractedfile }} exists"
  stat:
    path: "{{ extractedfile }}"
  register: raw_image_stat_result

- name: Uncompress if the archive is an xz
  command: "unxz -k {{ download.dest }}"
  when: ( raw_image_stat_result.stat.exists == False ) and ( url.find("xz") != -1 ) 

- name: Uncrompress if the archive is a zipfile
  unarchive:
    src: "{{ download.dest }}"
    dest: "{{ workpath }}"
  when: url.find("zip") != -1

- name: "Stat {{ extractedfile }}"
  stat:
    path: "{{ extractedfile }}"
  register: raw_image_stat_result

- debug: var=raw_image_stat_result.stat

# - name: size up the destination disk
#   set_fact:
#     desired_image_size: 7990149120
# 
# - name: pad the raw image to this size
#   command: "dd if=/dev/zero of={{ extractedfile }} bs=1 count=1 seek={{ desired_image_size - 1 }}"
#   when: raw_image_stat_result.stat.size < desired_image_size


- name: Read device information (always use unit when probing)
  parted:
    device: "{{ extractedfile }}"
    unit: B
  register: raw_part
- debug: var=raw_part.partitions
- set_fact:
    partflags: "{{ partflags + item.flags }}"
  loop: "{{ raw_part.partitions }}"
- debug: var=partflags
- set_fact:
    lvm: true
  loop: "{{ partflags }}"
  when: item == "lvm"

#- name: find the block size of the raw disk image
#  command: "fdisk -l fdisk -l /var/lib/libvirt/images/Fedora-Server-armhfp-32-20200314.n.1-sda.raw/var/lib/libvirt/images/Fedora-Server-armhfp-32-20200314.n.1-sda.raw|awk -F= '/Units/{print $2}'|awk '{print $1}'"
#  register: raw_block_size

# - debug var=raw_block_size
#- name: find the first block of the primary partition in the disk
#  command: "fdisk -l Fedora-Server-armhfp-32-20200314.n.1-sda.raw|grep 'raw3' |awk '{print $2}"
#  register: raw_start_block
#- debug var=raw_start_block

- name: select the main partition
  set_fact:
    main_partition: "{{ raw_part.partitions|last }}"

- name: mount the raw disk
  mount:
    src: "{{ extractedfile }}"
    path: "{{ rawmnt }}"
    opts: rw,loop,offset={{ main_partition.begin | regex_replace('\.0') }}
    state: mounted
    fstab: /tmp/fstab.dummy
    fstype: "{{ main_partition.fstype }}"
  when: lvm != true

- command: "kpartx -av {{ extractedfile }}"
  when: url.find("aarch64") != -1
#  register: kpartx_output
- debug: var=kpartx_output
- name: mount the raw disk
  mount:
    src: "/dev/fedora/root"
    path: "{{ rawmnt }}"
    opts: rw
    state: mounted
    fstab: /tmp/fstab.dummy
    fstype: xfs
  when: lvm == true

- name: Fedora set network configuration
  vars:
    var_ip: 192.168.6.29
    var_gw: 192.168.6.1
    var_dns: 8.8.8.8
    var_ifdevname: enp1s0
    var_ifname: "Wired connection 1"
    var_dest: "{{ rawmnt }}/etc/sysconfig/network-scripts"
  include_role:
    name: fedora-interface
  when: url.find("fedora") == -1

- name: Raspbian wifi configuration
  template:
    src: templates/wpa_supplicant.conf.j2
    dest: "{{ rawmnt }}/wpa_supplicant.conf"

- name: Raspbian touch ssh instruction file 
  file:
    name: "{{ rawmnt }}/touch /boot/sshroot"
    mode: '0700'
    state: file
  when: url.find("raspbian") == -1

- name: create a mount point
  file:
    name: "{{ rawmnt }}/root/.ssh"
    mode: '0700'
    state: directory
- name: create a file
  file:
    path: "{{ rawmnt }}/root/.ssh/authorized_keys"
    mode: '0600'
    state: touch

- name: Set appropriate permissions on the authorized_keys file
  lineinfile:
    path: "{{ rawmnt }}/root/.ssh/authorized_keys"
    state: present
    line: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/OzKiop0vzsvRJRadSHwj1nF2aKFGeCAreJJbBXkE0pW4Bo/MUgYr7zJia+7Z5x9COlS5gUMAyjg3EOR/XDZvoe0tkpcu1sTG2Ac5yOId91uoev0Vm3IKOttCEXjmgVRe7UYJfY0pAM+8S5MqDnylFpN1Uuoj7f5Ulkhx7HVEr7KWsXnLv/P09dEW+s9Ebpl9hnDFjzeRw9thIBRgXwzEmKdMxzgq+nVwUg3HfxEyf9jFSutfMNepmg7T7uQyQ2p38yy0nB+bmjzeRNHDzadNpTKJE2MYYzun9J6+8LAE8/HadvpWWIo5hEQJ519c8mYmqt4yso+uLJMAIBNOg9Z73IPVr8yuo6c6GY3jWI1cZB51OO1v+6dOM83tlN8w2vwIop2IoF1zc3OKolPXaP7NZttD8y+FOJrAnvSIooArEwenMEgJ8S03UMltMpDvNss/0+FLVx89WHs1mmr+8w8lAaO5LlN279RwiC+Lh13yP8oWmVUGGN0wGVsTWI494wk= root@a31.vebate.it"
#  copy:
#    src: ~/.ssh/id_rsa.pub
#    dest: "{{ rawmnt }}/root/.ssh/authorized_keys"


- name: Set root password
  lineinfile:
    path: "{{ rawmnt }}/etc/shadow"
    state: present
    #line: "root:::0:99999:7:::"
    line: 'root:$6$J0i11mQkC3hUrO0G$u371fR0mPIS.bKQlIPFPXMbS7n62ZqJqamwv/WgsX9OeCznfHh97arNRl.TWUsc7.E7HqO50NTR.CbL/dp2Az0::0:99999:7:::'
    regexp: '^root:'

- name: Permit root login via ssh
  lineinfile:
    path: "{{ rawmnt }}/etc/ssh/sshd_config"
    state: present
    line: "PermitRootLogin yes"
    regexp: '^PermitRootLogin'

- name: Disable selinux
  lineinfile:
    path: "{{ rawmnt }}/etc/sysconfig/selinux"
    state: present
    line: "SELINUX=disabled"
    regexp: '^SELINUX='

- name: Disable the initial-setup and other unneeded services
  file:
    path: "{{ rawmnt }}/etc/systemd/system/multi-user.target.wants/{{ service }}.service"
    state: absent
  loop:
    - initial-setup
    - abrtd
    - abrt-journal-core
    - abrt-oops
    - abrt-vmcore
    - abrt-xorg
    - cups
    - nfs-client
    - vboxservice
    - vmtoolsd
#    - rngd
#   - libvirtd
#   - ModemManager
#   - auditd
#   - smartd
#   - avahi-daemon
#   - remote-fs
  loop_control:
    loop_var: service

- name: Unmount the raw volume
  mount:
    path: "{{ rawmnt }}"
    state: unmounted


