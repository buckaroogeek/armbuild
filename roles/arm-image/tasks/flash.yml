---
# tasks file for image-flash

# using {{ dd_blocksize }} blocks (tested with 512K blocks represented numerically as 524288)
# {{ mbr }}, {{ boot }} and {{ root }} have the following structure
# mbr|boot|root:
#   image: path to image file
#   partition:
#     begin: first byte (represented with one digit past decimal point. must be run through int for seeks and additive math.)
#     end: last byte (represented with one digit past decimal point. must be run through int for seeks and additive math.)
#     size: size in bytes (represented with one digit past decimal point. must be run through int for seeks and additive math.)
# note
#
# due to addressging starting at zero, begin and size will be even and dividable by blocksize to convert to a blocks figure.
# end will be odd and requires 1 be added to it before dividing by blocksize to be converted to a blocks figure.
- name: Display parameters provided
  debug:
    var: "{{ item }}"
  loop:
    - mbr
    - boot
    - root
    - dd_blocksize
    - target

- name: Wipe out the first 300MB of the target disk to avoid parted complaints
  delegate_to: "{{ target.machine }}"
  shell: "dd if=/dev/zero of={{ target.device }} bs=1M count=300"
 
# - name: isolate the mbr to a separate file
#  shell: "dd if={{ mbr.image }} bs={{ dd_blocksize }} count={{ (mbr.partition.size|int/dd_blocksize)|int }} of={{ mbr.image }}.mbr"

- name: "stream the mbr and boot images to {{ target.machine }} and dd them to {{ target.device }}"
  shell: '( dd if={{ mbr.image }} count={{ (mbr.partition.size|int/dd_blocksize)|int }} bs={{ dd_blocksize }}; dd if={{ boot.image }} bs={{ dd_blocksize }} skip={{ (boot.partition.begin|int/dd_blocksize)|int }} count={{ (boot.partition.size|int/dd_blocksize)|int }} ) | ssh root@{{ target.machine }} dd of={{ target.device }} bs={{ dd_blocksize }}'

- name: "Remove partition number 2 in the staged mbr file {{ mbr.image }}.mbr"
  delegate_to: "{{ target.machine }}"
  parted:
    device: "{{ target.device }}"
    number: 2
    state: absent
- name: Create a second root partition on the target device using all remaining disk
  delegate_to: "{{ target.machine }}"
  parted:
    device: "{{ target.device }}"
    number: 2
    state: present
    part_start: "{{ ((mbr.partition.size|int + boot.partition.size|int)|int/1024)|int }}KiB"

- name: "Create a filesystem on partition {{ target.device }}2 on {{ target.machine }}"
  delegate_to: "{{ target.machine }}"
  filesystem:
    dev: "{{ target.device }}2"
    fstype: xfs

- name: make sure local mount stubs exist
  delegate_to: "{{ target.machine }}"
  file:
    name: "{{ mntroot }}/fedora32/root"
    mode: '0700'
    state: directory

- name: "mount the remote to-be raspberry root partition on {{ target.machine }}"
  delegate_to: "{{ target.machine }}"
  mount:
    src: "{{ target.device }}2"
    path: "{{ mntroot }}/fedora32/root"
    state: mounted
    fstab: /tmp/fstab.dummy
    fstype: "ext4"

- name: "copy the Fedora32 root filesystem as files to {{ target.machine }}"
  shell: "tar cfp - . | ssh root@{{ target.machine }} 'cd {{ mntroot }}/fedora32/root; tar xvfp -'"
  args:
    chdir: "{{ mntroot }}/fedora32/root"

# - name: "copy the Fedora32 root filesystem as files to {{ target.machine }}"
#   shell: "chown 755 {{ mntroot }}/fedora32/root"

- name: "copy the Fedora32 root filesystem as files to {{ target.machine }}"
  delegate_to: "{{ target.machine }}"
  file:
    path: "{{ mntroot }}/fedora32/root"
    state: directory
    mode: '0755'

- name: Unmount the remote target filesystem
  delegate_to: "{{ target.machine }}"
  mount:
    path: "{{ mntroot }}/fedora32/root"
    state: unmounted
