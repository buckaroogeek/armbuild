---
- name: make sure workpath exists
  file:
    name: "{{ workpath }}"
    state: directory

- name: "Checking for redirect and setting redcheck.stdout_lines.0 to notredirect or the actual url"
  shell: 'curl {{ requested_url }} --max-time 5 --max-redirs 0 --silent > /dev/null && curl {{ requested_url }} --max-redirs 0 --silent |grep moved|cut -d\" -f2 || echo notredirect'
  args:
    warn: no
  register: redcheck

- name: "Use the redirect URL {{ redcheck.stdout_lines.0 }} to avoid redownloading large images"
  set_fact:
    url: "{{ redcheck.stdout_lines.0 }}"
  when: redcheck.stdout_lines.0 != "notredirect"

- name: "Else use the requested URL {{ requested_url }}"
  set_fact:
    url: "{{ requested_url }}"
  when: redcheck.stdout_lines.0 == "notredirect"

- debug: var=url

- name: "Download the image from {{ url }}"
  get_url:
    url: "{{ url }}"
    dest: "{{ workpath }}/{{ url | basename }}"
  register: download
- debug: var=download

- name: Set the name of the file that just got extracted
  set_fact:
    extractedfile: "{{ download.dest | regex_replace('.xz') | regex_replace('.zip', '.img') }}"
- debug: var=extractedfile
- name: "Ensure that {{ extractedfile }} exists"
  stat:
    path: "{{ extractedfile }}"
  register: raw_image_stat_result

- name: Extract xz archives
  command: "unxz -k {{ download.dest }}"
  when: ( ( lazy == true and raw_image_stat_result.stat.exists == False ) ) and ( url.find("xz") != -1 )

- name: Extract zip archives
  unarchive:
    src: "{{ download.dest }}"
    remote_src: true
    dest: "{{ workpath }}"
    keep_newer: true
  when: url.find("zip") != -1
...
