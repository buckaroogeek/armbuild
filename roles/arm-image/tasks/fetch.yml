---
- name: make sure workpath exists
  file:
    name: "{{ workpath }}"
    state: directory

- name: set a variable to contain the escaped octal value of doublequotes
  set_fact:
    dq: \42

- name: "Checking for redirect and setting redcheck.stdout_lines.0 to notredirect or the actual url"
  shell: "curl {{ requested_url }} --max-time 5 --max-redirs 0 --silent |grep moved > /dev/null && curl {{ requested_url }} --max-redirs 0 --silent |grep moved|cut -d$'{{ dq }}' -f2 || echo notredirect"
  args:
    warn: no
  register: redcheck
  when: deref != true

- name: "Use the redirect URL to avoid redownloading large images"
  set_fact:
    url: "{{ redcheck.stdout_lines.0 }}"
  when:
    - redcheck.stdout_lines.0 != "notredirect"
    - deref != true

- name: "Else use the requested URL {{ requested_url }}"
  set_fact:
    url: "{{ requested_url }}"
  when:
    - redcheck.stdout_lines.0 == "notredirect"
    - deref != true
      
- name: "Use the requested URL {{ requested_url }} if deref is off"
  set_fact:
    url: "{{ requested_url }}"
  when:
    deref == true

- name: "Download the image from {{ url }}"
  get_url:
    url: "{{ url }}"
    dest: "{{ workpath }}/{{ url | basename }}"
  register: download
- debug: var=download

- name: Set the name of the file that just got extracted
  set_fact:
    extractedfile: "{{ download.dest | regex_replace('.xz') | regex_replace('.zip', '.img') }}"
- debug: var=extractedfile
- name: "Ensure that {{ extractedfile }} exists"
  stat:
    path: "{{ extractedfile }}"
  register: raw_image_stat_result

- debug: var=raw_image_stat_result
- debug: var=url

- name: Extract xz archives when they are not yet extracted
  command: "unxz -fk {{ download.dest }}"
  when: 
    - url.find("xz")
    - not raw_image_stat_result.stat.exists

- name: Extract xz archives when something named like their content is there
  command: "unxz -fk {{ download.dest }}"
  when: 
    - not url.find("zip")
    - raw_image_stat_result.stat.exists
    - not lazy|bool
    
- name: Extract zip archives
  unarchive:
    src: "{{ download.dest }}"
    remote_src: true
    dest: "{{ workpath }}"
    keep_newer: true
  when: url.find("zip") != -1
...
