---
- name: Play to deploy an operating system on a Raspberry
  hosts: builder1
#  connection: local
  vars: 
    dir: /usr/src
    workpath: /var/lib/libvirt/images
    mntroot: /mnt
    flashmachine: flasher
    flashdevice: /dev/sdb
    # fedora32_url: https://kojipkgs.fedoraproject.org/compose/branched/Fedora-32-20200318.n.0/compose/Server/armhfp/images/Fedora-Server-armhfp-32-20200318.n.0-sda.raw.xz
    fedora32_url: https://kojipkgs.fedoraproject.org/compose/branched/Fedora-32-20200401.n.1/compose/Server/aarch64/images/Fedora-Server-32-20200401.n.1.aarch64.raw.xz
    raspbian_url: https://downloads.raspberrypi.org/raspbian_lite_latest
    lazy: true
    dd_blocksize: 524288
  tasks:

# Set up Fedora 32
    - name: Download and prep Fedora 32
      vars:
        instruction: fetch
        requested_url: "{{ fedora32_url }}"
      include_role:
        name: arm-image
   
    - name: "Find boot and root partitions in extracted image {{ extractedfile }}"
      vars:
        instruction: partscan
        image: "{{ extractedfile }}"
      include_role:
        name: arm-image

    - name: "Mount the root partition"
      vars:
        instruction: mount
        image: "{{ extractedfile }}"
        mountstub: "{{ mntroot }}/fedora32/root"
        partition: "{{ root_partition.0 }}"
      include_role:
        name: arm-image

    - name: Keep partition table data about the root partition to dump to flash later
      set_fact:
        flash_root:
          image: "{{ extractedfile }}"
          partition: "{{ root_partition.0 }}"

    - name: Download and prep Raspbian
      vars:
        instruction: fetch
        requested_url: "{{ raspbian_url }}"
      include_role:
        name: arm-image
   
    - name: "Find boot and root partitions in extracted image {{ extractedfile }}"
      vars:
        instruction: partscan
        image: "{{ extractedfile }}"
      include_role:
        name: arm-image

    - name: "Mount the root partition in {{ mntroot }}/raspbian/root"
      vars:
        instruction: mount
        mountstub: "{{ mntroot }}/raspbian/root"
        image: "{{ extractedfile }}"
        partition: "{{ root_partition.0 }}"
      include_role:
        name: arm-image

    - name: Configure the fedora root filesystem
      vars:
        instruction: configure-root
        location: "{{ mntroot }}/fedora32/root"
        module_location: "{{ mntroot }}/raspbian/root/lib/modules"
        network:
          device: eth0
          ipaddr: 192.168.6.29
          prefix: 24
          gateway: 192.168.6.1
          dns1: 8.8.8.8
          bootproto: none
      include_role:
        name: arm-image

    - name: Unmount the root filesystems
      mount:
        path: "{{ item }}"
        state: unmounted
      loop:
        - "{{ mntroot }}/raspbian/root"
        - "{{ mntroot }}/fedora32/root"

    - name: "Mount the boot partition in {{ mntroot }}/raspbian/boot"
      vars:
        instruction: mount
        mountstub: "{{ mntroot }}/raspbian/boot"
        image: "{{ extractedfile }}"
        partition: "{{ boot_partition.0 }}"
      include_role:
        name: arm-image

    - name: Keep partition table data about the boot partition to dump to flash later
      set_fact:
        flash_boot:
          image: "{{ extractedfile }}"
          partition: "{{ boot_partition.0 }}"

    - name: Perform any required changes to the boot filesystem
      vars:
        instruction: configure-boot
        location: "{{ mntroot }}/raspbian/boot"
        init: "/sbin/init"
      include_role:
        name: arm-image

    - name: Unmount the boot filesystems
      mount:
        path: "{{ mntroot }}/raspbian/boot"
        state: unmounted

    - debug: var=flash_boot
    - debug: var=flash_root

- name: Play to write to flash 
  hosts: flasher1
  vars: 
    source: builder1
  tasks:
    - name: Write to flash
      vars:
        instruction: flash
        boot_image_file: '{{ flash_boot.image }}'
        mbr_blockcount: '{{ ( flash_boot.partition.begin / dd_blocksize ) | int }}'
        boot_blockcount: '{{ ( flash_boot.partition.size / dd_blocksize ) | int }}' 
        root_image_file: '{{ flash_root.image }}'
        root_image_skip: '{{ ( flash_root.partition.begin / dd_blocksize ) | int }}'
        root_blockcount: '{{ ( flash_root.partition.size / dd_blocksize ) | int }}' 
      include_role:
        name: arm-image
...
